from mbarq.counter import BarcodeCounter
from collections import Counter
import pandas as pd


def test_extract_barcodes_rbseq(count_test_data, tn5_structure, tmpdir):
    """
    Check counting barcodes in fasta file
    """
    seq_file, _ = count_test_data
    seq_data = BarcodeCounter(seq_file, tn5_structure, output_dir=tmpdir)
    seq_data._extract_barcodes()

    expected_dict = Counter({'AACAAGACCGAAATGCG': 4, 'CGGAAAGGAGGACCTGG': 3, 'ATGGTGGACGGTGGACC': 3, 'GAAGTCTGGAAAACATT': 3, 'TCGCGATGTAATATATA': 3, 'CAACTATCTCTCCTGCC': 3, 'TAAACAATGTACATAGA': 3, 'TAGCGTACGATGGGTAA': 3, 'AATCAATTACGTTACGG': 3, 'TCCGAGGAGTCTGAGGA': 3, 'CCTCGCCCGTGGCTGAC': 3, 'GTAAACCCAGAAGAATT': 3, 'TGTTTTGGTAACGCTGC': 3, 'ACGCGCCAGACTTACGC': 3, 'CTTCACTGTCATACGAA': 3, 'GGGATCTCGGTGACCTT': 3, 'AAGCCCATCCCAGGTTA': 3, 'GCTGAGAACAACAAAAC': 3, 'TACCCAGAGCACACTCA': 3, 'TCTTCGAAAGCTAAACC': 3, 'GGGACCAAAGTACTAGA': 2, 'TAACGGCAACATATGGC': 2, 'CTCGAGTATTAAGCCTG': 2, 'TATGCCTGCCTTCGACG': 2, 'CCTGAAAACCTTCACTC': 2, 'TTGGTGGAGCCAAACAG': 2, 'AGATCGCTGCTCGGGCG': 2, 'ATCAGCATATATATACT': 2, 'TGACCGCCACTACTCGC': 2, 'GGCATCTTAACGACACG': 2, 'CTAGTGGACCCACGAAT': 2, 'GCTCTGCTGAATTCCAG': 2, 'GCCTACGCCAACTGCAG': 2, 'TAGTGTAGAGGGGGCGT': 2, 'CCCAGACGGAACAAAAG': 2, 'GACTCGAAGCGTTCCGG': 2, 'CGACCAACCTACAGCGA': 2, 'AGGCCCACATTCAAGGA': 2, 'AGTATGCAGACATGTGT': 2, 'GCATTCTCACCGGTCGA': 2, 'CAACGCCTTACTGCCAG': 2, 'TAAACGCAGGCGAATAC': 2, 'GACAGTTCATGAAAGTG': 2, 'CGGCACACTAAAAAAGC': 2, 'CGTCATCGGCGGTATGT': 2, 'GTCGACGGGTGAAATAG': 2, 'GTTCAGTATGACAGGAG': 2, 'TCCGGTTGGGCCTGACC': 2, 'AGGAGTAGCCGAGTGCT': 2, 'CCACGTCAATCGAAAAG': 2, 'CTTAGAACATCTGCTGC': 2, 'AGGAGGACAATACGTTA': 2, 'GGCATCATTAAGCGACG': 2, 'AGAGCAAGTATCAGGGG': 2, 'GCCGTGTAAACGCGGTG': 2, 'TACAGATTGACCCTACC': 2, 'GACACCCCTGAACTACC': 2, 'GTGACTCCGTCCAACAG': 2, 'TCTCAACGTTAGCCTGT': 2, 'ATGAAAAGTATGAATCC': 2, 'ATGCCATGAAAATACCC': 2, 'CGTAACGTATTTTACTA': 2, 'CTCCCAACTTATCAGAG': 2, 'GGAAAGACGAGAGGGGC': 2, 'GCGGGAACACGAGGGGA': 2, 'CAGGTCTATCGAGACAC': 2, 'ACAAACACCGTAAAATG': 2, 'AGTACGGGTACAATGCG': 2, 'CCGTAGCGACCATGGAC': 2, 'CGACGCGGGACCAGGCC': 2, 'AAAACCTCCCTGCCCAT': 2, 'GAGCTAACCGATAACGG': 2, 'GTGATCCCACCCAGGCT': 2, 'GAGTGTCCCGCACTGAG': 2, 'GCCAGCCCGAAGGTTAC': 2, 'ATCACCGGGGCTAAGGC': 2, 'ACACGNGATCTGAATCT': 1, 'TCTGCAACGAGTTCAAC': 1, 'GTTACCACAGACCCTAT': 1, 'TATCGAACCACATCATA': 1, 'AAATATTAACCATACAA': 1, 'AAGAAGGAGAATTCCTA': 1, 'GCCCAGTAGTCTGTGAG': 1, 'AGATCGGGAAGAAAGAA': 1, 'AGACCATAAAGACGTCC': 1, 'ACCAGTACGGCTTAGCA': 1, 'TTTAANGACTCACAATT': 1, 'AGACCGATGCGTCAAGG': 1, 'CTTCACCAACGAATATT': 1, 'AACACTGGACCAGTACC': 1, 'ACGCAATATATCAGCCT': 1, 'ACGCGGCCTAGACAGAC': 1, 'ATAAGGGCTCTGCTGTA': 1, 'GCGGCCTCGTACAGCTG': 1, 'GGATATAGTACTCTCAC': 1, 'TATTCTCGCTTCTGTCA': 1, 'AAGAAGGACGGACAATA': 1, 'GCCCGCTTACACTTCGT': 1, 'CCATGACCATACTCACA': 1, 'GCTTGAGCTACGCACGA': 1, 'AGGAAACCAAATATAAA': 1, 'GCCGTAATCCTTAGAAG': 1, 'ACAGTTTATGCAAGTAC': 1, 'CCCAGNCGGAACAAAAG': 1, 'CCGTCTGGCTGAGACTG': 1, 'ACGCAGACCCTCACTTT': 1, 'TTTTCTTGATAGTCAAC': 1, 'AGCAAGTGATCGGATAG': 1, 'TTGACAAACGAAGAACC': 1, 'GCCAGGTTACCTCCCAT': 1, 'GGACCGGAGACAGAATA': 1, 'GTCCCTGGCGGCGAGAG': 1, 'GTATCACTGACGGCGAC': 1, 'CAAAAATGATCGCGTAG': 1, 'GACCTCCTTGGGATGAT': 1, 'CTAGCTCAAACAATGGC': 1, 'CCAACCCCACACAGGTA': 1, 'TCGCAAATAACGCAGTT': 1, 'GACATTGGATCACGCTC': 1, 'CCGCGCACAACAATTAC': 1, 'CGAAAATGCCTCCAGCC': 1, 'CGAAAAGATATACCAAT': 1, 'GCAAGTTCAACCGCTTC': 1, 'AGATAAGTGATAAACAT': 1, 'AAATAAGCCTGGACACC': 1, 'ATATACGCAATACGATG': 1, 'ACACGCAGACTGATATA': 1, 'GCGGTGACAGGATCGGA': 1, 'GTAACCCCGAGGACGAA': 1, 'ACTTTGCCAGCAGGCAA': 1, 'ACCCTCGGCTTATCAGA': 1, 'AATGACCGCGCCCGTCA': 1, 'CTACACGAGCCGCCCGC': 1, 'AGCATAAGACCATAAAG': 1, 'GCTGTGGTAGTCTAGTG': 1, 'AAACGGAACCGGCGCTA': 1, 'GTTCTGAAAGGTCCCCC': 1, 'GTGCAATTCGCTCGGCG': 1, 'TGCAGACAGGGGAATTT': 1, 'TCCTACATTCACGGTCT': 1, 'ATGAACGTTTATGGCGA': 1, 'TCTTGCAGATGATAGGC': 1, 'CCCCATAAACCCTTGCG': 1, 'AGATTACGATCATCCAG': 1, 'CCCCATGACAGCGTTAT': 1, 'AAGCAAAAAAAGACAAA': 1, 'GCTGCATGCGGACTATC': 1, 'GTAACCCCCCATAGGAG': 1, 'GCATTCGTGCGGCCAAG': 1, 'AACCCCACACATAGGTG': 1, 'AGTGAGAGCAGCTTTGG': 1, 'TAAACTACCTTTGACCA': 1, 'GCGACCACGGCACACAA': 1, 'TAACAATGAGGTAACCA': 1, 'AAATTCCTGCCCCCAAG': 1, 'ATCAAAAAGTCATTTCC': 1, 'TGGAAACCCTATCGCTA': 1, 'ATCCCATGCTATAAGTC': 1, 'TCTTTCCCAATCTAGAG': 1, 'GACAGATATCATGCCGG': 1, 'CCCCTATACAGATCATA': 1, 'CAGGCCAGAGTAAGACA': 1, 'CCTAGTCGATAGACCAG': 1, 'TCGCGCCTAGAGCTATG': 1, 'AATGGTAAGGTAAACAT': 1, 'CAGAAGCACCGCGTGAC': 1, 'TGGCACGTGCCGCCCAC': 1, 'GGTGGCACCTATAACAA': 1, 'GACCAGCAGTGAGTACA': 1, 'AAAATTACACAGACAAA': 1, 'AATAATAGCCGACCACG': 1, 'AAAGGTTAGCCCCAGCT': 1, 'CTGAACGCGAGCTGGTC': 1, 'GAGCTCGTGACATCTAT': 1, 'CAAAAAGCGACCTCATA': 1, 'AACACATCACCGCGGGT': 1, 'CGGAGGCTCTCCCCGTT': 1, 'CACGTAGTCAAGTTGCG': 1, 'CCAACCCCGGCCTAAAA': 1, 'AGACACCCCGTCTAAAG': 1, 'CACCTTCACCCACTGCG': 1, 'TAAACCGACAAGCCCGA': 1, 'GGTTACCGCGCTCATGA': 1, 'CGCGAGCGATATGCGAA': 1, 'GCAGCGTTGCGCGGTGA': 1, 'GACACATTGGAGGTACA': 1, 'AATGAGGCCGTTGAGGT': 1, 'ACAGAAGTGCGATAAAT': 1, 'ATTGTTCTATGCTTGCC': 1, 'CAGGCCACCAGTCTGCT': 1, 'CCGACAATGCTAAGACG': 1, 'CAGCACCTGAGAATCAA': 1, 'CCACACGCGCGACTACA': 1, 'AGGTAAGCCCTACCAGT': 1, 'TCTAGTCCCCCATCAGG': 1, 'GACTGCAAGCGCCTGAA': 1, 'TTGAAGAACACCTGAGC': 1, 'CCCGCGATCCATTGCCC': 1, 'CCATCCGCAAACCACGG': 1, 'TACGGATCCGAATCCCA': 1, 'CCGAACTGGGGTATACA': 1,
                            'CATACGAGGCTCACCGG': 1, 'TTGACGCAAGATACCTC': 1, 'GCAAACTGTTACATAAG': 1, 'ACGAATAGCTCTGACAT': 1, 'CAACCTCGGCCCATTCC': 1, 'GACTCCCATCGACCTCC': 1, 'TTGGTGCTTCCCGAAAA': 1, 'TCGAGACACGCCCGCGG': 1, 'AAGCTGAGGGATTTGGG': 1, 'AGGAACGCTTACGGACG': 1, 'TGGTCCCGGTCCCGGAG': 1, 'GACTATTAGGATTACCA': 1, 'TGTGCGGTGGCTATCAC': 1, 'ACGCTGGACCACCAGGA': 1, 'CGTTCCAGGCCTTCGAT': 1, 'CGGTCGAAGTCACTGTA': 1, 'AGATTGTGTCCACGTTG': 1, 'TTACGAGCTCATGAGCA': 1, 'AAACGGGCGCGGATCCG': 1, 'TGACGGTACTCGCAACA': 1, 'ATTCCACAAGCACATAG': 1, 'CAGGGCTATGTGGGCCC': 1, 'ATGTTATGGCACGGTGC': 1, 'CCTCCAAGGAAACTAAG': 1, 'TAGTTACAAGCGGAGAA': 1, 'CGACCACGACAACTGCG': 1, 'TTTTGGCTGGCGAGATT': 1, 'TAGCTGTCATTAAATGC': 1, 'GCGGCAGTTCGTGCAAC': 1, 'ATTCGAACAGTGATCCA': 1, 'TACCCATTGCAATGGAC': 1, 'CAAGCCAGAGCCGGAAT': 1, 'GTCCCGCATCTCTACAA': 1, 'TGCGCCTGAACGTGCCT': 1, 'ACCAGTACGGCATAGCA': 1, 'CACTGTACTACGTGTTA': 1, 'CGTTTCCAACACTACCA': 1, 'ACTGTTGCGACACTTCA': 1, 'AAGATGCGCCTTAGCTC': 1, 'CACGTTAAACGACATTC': 1, 'CAAGCATCGACATGCGC': 1, 'AACTGGGATCAGATAGA': 1, 'TCAGAAGATAGGAGGTG': 1, 'TCCCCAGAATTTGGGCC': 1, 'ACAAACCGTAGGCGCCA': 1, 'GCTCCAAGTTGACGGTT': 1, 'ACTGGAGCAACCTCATC': 1, 'GCAGACGGGCAAAGTTC': 1, 'CCCCACGCTCGAGGTTG': 1, 'TGTCCGCCGTAAAGTGC': 1, 'CTTTATACGCGAACTCG': 1, 'CACACAATCCCGATCGC': 1, 'GGCTAAAGAGCCGCCAA': 1, 'AGGAAGGCGACGAAATC': 1, 'ACACCTTGTCCCAGGCA': 1, 'GATTCGAGCGCTTTCGC': 1, 'ACTAACGAAAAATTCTC': 1, 'CGTTAGGACTTTACTCG': 1, 'TAAACAGTAACGGCCAA': 1, 'GATCACCCTAATCCAGC': 1, 'GAGCTGAACCTGCATAC': 1, 'TGTTTAGGATGTAATAT': 1, 'CATGTCGGCCTACCCGG': 1, 'TACTCCACAGGACATTG': 1, 'CGCATTTTACAGCGCGC': 1, 'GGCATGCAGGCCCTTAG': 1, 'AGAGCACACGACCGGTG': 1, 'ACACGATTTGCCTGTAG': 1, 'CGTACTAGGGAACTGGG': 1, 'CGTAGCGCTGAGTAAAA': 1, 'CGCTTATAAAAAGTACT': 1, 'ACCCTGCGTCCAGAGGC': 1, 'CGAGTACCAACCGTGAC': 1, 'CCAAGCCCTTTATACCG': 1, 'ATCATCATATATATACT': 1, 'TATAGAGCACATCAGCT': 1, 'AATATGCAGTCATTCGA': 1, 'AACGCGTGCTCTTTTGG': 1, 'ACACGTTCAGAACAAAA': 1, 'TCCATGAGCTGAGCAGC': 1, 'CGTGGACTGTACTGACA': 1, 'CTAACCCATTCGGTCCG': 1, 'TACCGATCCCAAATTGC': 1, 'GCACCTTCAAAGCTTCT': 1, 'TCAGAAGATAAGAGGTG': 1, 'CAGACATACCCATGTGT': 1, 'AGGAAAAAGCTTATGCT': 1, 'CTATCAAAGCTGTAAGA': 1, 'TCCAGACCTTTGCGCGA': 1, 'AGTGCCCGTAAAGGAAT': 1, 'CAAGGAGAAGTCCGGAG': 1, 'AAATCGCCGAAGCCTAA': 1, 'CGCCAAGGGCCACACCT': 1, 'GGGACACAGGTAGATAG': 1, 'TGACGACGCCATAAAGA': 1, 'TACATCGCTAGTGAACT': 1, 'TCTGCATACCGGTGACA': 1, 'CGGTAATGTGGGGGACC': 1, 'TAAGATACAAGTCGATA': 1, 'TGTAATGTGGGGGAGGT': 1, 'TCTTGCCGGCTAGATAA': 1, 'TTTTTGGACCCCGCGAA': 1, 'TGGGCGCAACGCGGGCT': 1, 'GTGGAAACAGCGCGAAT': 1, 'GCCCGTATACACCGGGG': 1, 'GAACGCGGAATAATGCG': 1, 'GATTTCAGACTACCTGC': 1, 'AAATAGGTAATTGGTCA': 1, 'ATCCCACTAGAGTCGCG': 1, 'CAAACCGCGGTCTAAGA': 1, 'GCCGTTCCTATGCGAGC': 1, 'CTCGCTGCTGGTGCGTA': 1, 'AATTCAACGCGGTGCCT': 1, 'ATCCCTTTTGACCGCGC': 1, 'CCCACCCCCATATAAGG': 1, 'GCAAACTACGTATCAAA': 1, 'TCTAGCGCAGCTTCCCA': 1, 'GGGGTCACTAATGCTTC': 1, 'CAATAAATCACAGTTGA': 1, 'TTCCAAAATCTAAAACA': 1, 'CCAGGGACAAGAGTAAT': 1, 'GTTCTAATGAACCCAAC': 1, 'ATAACGACCCATTGTCT': 1, 'GGGGTGCCAAACATCGG': 1, 'TCTACTGCGTATAAGGG': 1, 'AGGTGTCGAATTAGAAC': 1, 'AGTGCTGGCTGGAAAAG': 1, 'TTGAGTCATACACTCCA': 1, 'TTCCCAATGTTGAGGCG': 1, 'TACCGTAAATGCAAATA': 1, 'GAACGCGGATGTTGCAA': 1, 'GCCCTTTGCAGGACGAT': 1, 'CCTAAAGCAAGTGGTGT': 1, 'GATGTGTGCATAGATTG': 1, 'ACCGCAGTTACTAACAC': 1, 'TAACGTTGCGTCACCAT': 1, 'ACCACATTCAGACGTAT': 1, 'AAACCACGGACAGGGAA': 1, 'TTCCTCACTTTACCGAC': 1, 'TACCCCGGGCATAAATG': 1, 'TTCTGAGATGTGCAGCC': 1, 'CCTTTCTGAGCAACCAG': 1, 'TCGTGCGACTGTATACT': 1, 'TATCAGCGCGCGACTTA': 1, 'CATCGACGAAGCCACGC': 1, 'GGCTATCTGGAAGATAG': 1, 'CCCTTATGAAAATTGAA': 1, 'CGAGGGGGTAGCGAGCA': 1, 'GTAGTTGACAGATACTC': 1, 'AAAGGCGCGGCTTTACA': 1, 'GACCAAAACCGGCCACT': 1, 'CGCCTACCGAAGTGAAA': 1, 'TGTTGCATTAAACCACC': 1, 'GAACAGACGATATCCCG': 1, 'GAACTTCGTTCGCTGCT': 1, 'GGGCATTTGGATCCCAA': 1, 'CCACCCCTAGCAATATT': 1, 'CCGACCATGAGGTCTTC': 1, 'CACGTGCGGATCTTCAG': 1, 'GAGAGACCCTCTCTAGT': 1, 'AACCATCAGAGGCAATC': 1, 'TGATTGGACCAACTACC': 1, 'CTAGTGGCAGACAACCT': 1, 'TCCCTGTGCGTACGCAA': 1, 'CGAACCATCGAAGGCCA': 1, 'GACCTGTTTCACTGCGA': 1, 'GCTAAACTACGATACTG': 1, 'GGTTAACGAAATAACTC': 1, 'CTAAGTATCCGAACATT': 1, 'GTGACGCAAGGCTTGCA': 1, 'CCCCAAGGCTGCATCCA': 1, 'AAGCATCGCCTGGCTCA': 1, 'TTACCGTCCAGCCCGGG': 1, 'AAAACACGAAATTCCGA': 1, 'TTTGCGATCCGCTGACT': 1, 'ACACAATAACCCGAATA': 1, 'GATGGGCCTGAGGCAGA': 1, 'TCCTGCAAGCGACCACT': 1, 'ATCAAATGGCTAATACG': 1, 'GGGATAGGGATGTCCAC': 1, 'CTTGCTTGCTCAACAAG': 1, 'CACGGGCCTACCTATGT': 1, 'TGCCACACGGGTCCTCG': 1, 'CAAGTATACATTGAACG': 1, 'CCTGTAAGTGCTACCCA': 1, 'TCATCAAAAGTATCTTC': 1, 'GTCCGGATCAAGATGAA': 1, 'ACCCTTACACACCAGCT': 1, 'CAGAATCACTCCCGCAT': 1, 'CGTGCCAATAAATTTAA': 1, 'CCGCGAGCAAACGGAAT': 1, 'CCGATATAAATTATCCT': 1, 'GCGTACAACTGAGCTGT': 1, 'GCCAAAAATCAGCACCA': 1, 'TGATCAGGCCCCGATAT': 1, 'CGAGAACTATGGCTTTT': 1, 'TAAGACGCGCTGAGGTC': 1, 'TAGCTTACTCCAATGCA': 1, 'CCCCACGTCTTTTCTAT': 1, 'AAATATCCGCGCCAAGA': 1, 'TCCCCCCCCGCAAATAG': 1, 'ACCGGTTCTATGACATC': 1})
    assert all([v == seq_data.barcode_counter[k]
               for k, v in expected_dict.items()])


def test_merge_similar(count_test_data, tn5_structure, tmpdir):
    """

       Final resutls:

       AAGCCCAATAAACCACT 105
       CTGACTGGCCGAATAGG 50
       GATATAGGCAACGACAT 43
       GTGCGGCGACCCTTGCG 22
       ACAGTGACGCTTTCGCC 11
       GTTGCCTAAACCTATTT 3

       :return:
       """
    # random.seed(42)
    # barcodes = ["".join([random.choice(['A', 'C', 'G', 'T']) for _ in range(17)]) for _ in range(6)]

    barcodes = Counter(
        {'AAGCCCAATAAACCACT': 100, 'CTGACTGGCCGAATAGG': 50, 'GATATAGGCAACGACAT': 40,
         'GTGCGGCGACCCTTGCG': 20, 'ACAGTGACGCTTTCGCC': 10, 'GTTGCCTAAACCTATTT': 3,
         'TTGCCCAATAAACCACT': 5, 'GATATCGGCAACGACAT': 3, 'GTGCGCCGAACCTTGCG': 2,
         'ACAGTGAGGCTTTCGCC': 1})

    r1, _ = count_test_data
    seq_data = BarcodeCounter(r1, tn5_structure, output_dir=tmpdir)
    seq_data.barcode_counter = barcodes
    seq_data._merge_similar()
    expected_counter = Counter({'AAGCCCAATAAACCACT': 105, 'CTGACTGGCCGAATAGG': 50,
                                'GATATAGGCAACGACAT': 43, 'GTGCGGCGACCCTTGCG': 22,
                                'ACAGTGACGCTTTCGCC': 11, 'GTTGCCTAAACCTATTT': 3})
    assert (expected_counter == seq_data.barcode_counter)
    assert (seq_data.merged is True)


def test_merge_similar_dnaid1315(count_test_data, tn5_structure, tmpdir):
    r1, mfile = count_test_data
    seq_data = BarcodeCounter(
        r1, tn5_structure, mapping_file=mfile, output_dir=tmpdir)
    seq_data._extract_barcodes()
    print(len(seq_data.barcode_counter))
    seq_data._merge_similar()
    expected_dict = Counter({'AACAAGACCGAAATGCG': 4, 'CGGAAAGGAGGACCTGG': 3, 'ATGGTGGACGGTGGACC': 3, 'GAAGTCTGGAAAACATT': 3, 'TCGCGATGTAATATATA': 3, 'CAACTATCTCTCCTGCC': 3, 'TAAACAATGTACATAGA': 3, 'TAGCGTACGATGGGTAA': 3, 'AATCAATTACGTTACGG': 3, 'TCCGAGGAGTCTGAGGA': 3, 'CCTCGCCCGTGGCTGAC': 3, 'GTAAACCCAGAAGAATT': 3, 'TGTTTTGGTAACGCTGC': 3, 'ACGCGCCAGACTTACGC': 3, 'CTTCACTGTCATACGAA': 3, 'GGGATCTCGGTGACCTT': 3, 'AAGCCCATCCCAGGTTA': 3, 'GCTGAGAACAACAAAAC': 3, 'TACCCAGAGCACACTCA': 3, 'TCTTCGAAAGCTAAACC': 3, 'ATCAGCATATATATACT': 3, 'CCCAGACGGAACAAAAG': 3, 'GGGACCAAAGTACTAGA': 2, 'TAACGGCAACATATGGC': 2, 'CTCGAGTATTAAGCCTG': 2, 'TATGCCTGCCTTCGACG': 2, 'CCTGAAAACCTTCACTC': 2, 'TTGGTGGAGCCAAACAG': 2, 'AGATCGCTGCTCGGGCG': 2, 'TGACCGCCACTACTCGC': 2, 'GGCATCTTAACGACACG': 2, 'CTAGTGGACCCACGAAT': 2, 'GCTCTGCTGAATTCCAG': 2, 'GCCTACGCCAACTGCAG': 2, 'TAGTGTAGAGGGGGCGT': 2, 'GACTCGAAGCGTTCCGG': 2, 'CGACCAACCTACAGCGA': 2, 'AGGCCCACATTCAAGGA': 2, 'AGTATGCAGACATGTGT': 2, 'GCATTCTCACCGGTCGA': 2, 'CAACGCCTTACTGCCAG': 2, 'TAAACGCAGGCGAATAC': 2, 'GACAGTTCATGAAAGTG': 2, 'CGGCACACTAAAAAAGC': 2, 'CGTCATCGGCGGTATGT': 2, 'GTCGACGGGTGAAATAG': 2, 'GTTCAGTATGACAGGAG': 2, 'TCCGGTTGGGCCTGACC': 2, 'AGGAGTAGCCGAGTGCT': 2, 'CCACGTCAATCGAAAAG': 2, 'CTTAGAACATCTGCTGC': 2, 'AGGAGGACAATACGTTA': 2, 'GGCATCATTAAGCGACG': 2, 'AGAGCAAGTATCAGGGG': 2, 'GCCGTGTAAACGCGGTG': 2, 'TACAGATTGACCCTACC': 2, 'GACACCCCTGAACTACC': 2, 'GTGACTCCGTCCAACAG': 2, 'TCTCAACGTTAGCCTGT': 2, 'ATGAAAAGTATGAATCC': 2, 'ATGCCATGAAAATACCC': 2, 'CGTAACGTATTTTACTA': 2, 'CTCCCAACTTATCAGAG': 2, 'GGAAAGACGAGAGGGGC': 2, 'GCGGGAACACGAGGGGA': 2, 'CAGGTCTATCGAGACAC': 2, 'ACAAACACCGTAAAATG': 2, 'AGTACGGGTACAATGCG': 2, 'CCGTAGCGACCATGGAC': 2, 'CGACGCGGGACCAGGCC': 2, 'AAAACCTCCCTGCCCAT': 2, 'GAGCTAACCGATAACGG': 2, 'GTGATCCCACCCAGGCT': 2, 'GAGTGTCCCGCACTGAG': 2, 'GCCAGCCCGAAGGTTAC': 2, 'ATCACCGGGGCTAAGGC': 2, 'ACCAGTACGGCTTAGCA': 2, 'TCAGAAGATAGGAGGTG': 2, 'ACACGNGATCTGAATCT': 1, 'TCTGCAACGAGTTCAAC': 1, 'GTTACCACAGACCCTAT': 1, 'TATCGAACCACATCATA': 1, 'AAATATTAACCATACAA': 1, 'AAGAAGGAGAATTCCTA': 1, 'GCCCAGTAGTCTGTGAG': 1, 'AGATCGGGAAGAAAGAA': 1, 'AGACCATAAAGACGTCC': 1, 'TTTAANGACTCACAATT': 1, 'AGACCGATGCGTCAAGG': 1, 'CTTCACCAACGAATATT': 1, 'AACACTGGACCAGTACC': 1, 'ACGCAATATATCAGCCT': 1, 'ACGCGGCCTAGACAGAC': 1, 'ATAAGGGCTCTGCTGTA': 1, 'GCGGCCTCGTACAGCTG': 1, 'GGATATAGTACTCTCAC': 1, 'TATTCTCGCTTCTGTCA': 1, 'AAGAAGGACGGACAATA': 1, 'GCCCGCTTACACTTCGT': 1, 'CCATGACCATACTCACA': 1, 'GCTTGAGCTACGCACGA': 1, 'AGGAAACCAAATATAAA': 1, 'GCCGTAATCCTTAGAAG': 1, 'ACAGTTTATGCAAGTAC': 1, 'CCGTCTGGCTGAGACTG': 1, 'ACGCAGACCCTCACTTT': 1, 'TTTTCTTGATAGTCAAC': 1, 'AGCAAGTGATCGGATAG': 1, 'TTGACAAACGAAGAACC': 1, 'GCCAGGTTACCTCCCAT': 1, 'GGACCGGAGACAGAATA': 1, 'GTCCCTGGCGGCGAGAG': 1, 'GTATCACTGACGGCGAC': 1, 'CAAAAATGATCGCGTAG': 1, 'GACCTCCTTGGGATGAT': 1, 'CTAGCTCAAACAATGGC': 1, 'CCAACCCCACACAGGTA': 1, 'TCGCAAATAACGCAGTT': 1, 'GACATTGGATCACGCTC': 1, 'CCGCGCACAACAATTAC': 1, 'CGAAAATGCCTCCAGCC': 1, 'CGAAAAGATATACCAAT': 1, 'GCAAGTTCAACCGCTTC': 1, 'AGATAAGTGATAAACAT': 1, 'AAATAAGCCTGGACACC': 1, 'ATATACGCAATACGATG': 1, 'ACACGCAGACTGATATA': 1, 'GCGGTGACAGGATCGGA': 1, 'GTAACCCCGAGGACGAA': 1, 'ACTTTGCCAGCAGGCAA': 1, 'ACCCTCGGCTTATCAGA': 1, 'AATGACCGCGCCCGTCA': 1, 'CTACACGAGCCGCCCGC': 1, 'AGCATAAGACCATAAAG': 1, 'GCTGTGGTAGTCTAGTG': 1, 'AAACGGAACCGGCGCTA': 1, 'GTTCTGAAAGGTCCCCC': 1, 'GTGCAATTCGCTCGGCG': 1, 'TGCAGACAGGGGAATTT': 1, 'TCCTACATTCACGGTCT': 1, 'ATGAACGTTTATGGCGA': 1, 'TCTTGCAGATGATAGGC': 1, 'CCCCATAAACCCTTGCG': 1, 'AGATTACGATCATCCAG': 1, 'CCCCATGACAGCGTTAT': 1, 'AAGCAAAAAAAGACAAA': 1, 'GCTGCATGCGGACTATC': 1, 'GTAACCCCCCATAGGAG': 1, 'GCATTCGTGCGGCCAAG': 1, 'AACCCCACACATAGGTG': 1, 'AGTGAGAGCAGCTTTGG': 1, 'TAAACTACCTTTGACCA': 1, 'GCGACCACGGCACACAA': 1, 'TAACAATGAGGTAACCA': 1, 'AAATTCCTGCCCCCAAG': 1, 'ATCAAAAAGTCATTTCC': 1, 'TGGAAACCCTATCGCTA': 1, 'ATCCCATGCTATAAGTC': 1, 'TCTTTCCCAATCTAGAG': 1, 'GACAGATATCATGCCGG': 1, 'CCCCTATACAGATCATA': 1, 'CAGGCCAGAGTAAGACA': 1, 'CCTAGTCGATAGACCAG': 1, 'TCGCGCCTAGAGCTATG': 1, 'AATGGTAAGGTAAACAT': 1, 'CAGAAGCACCGCGTGAC': 1, 'TGGCACGTGCCGCCCAC': 1, 'GGTGGCACCTATAACAA': 1, 'GACCAGCAGTGAGTACA': 1, 'AAAATTACACAGACAAA': 1, 'AATAATAGCCGACCACG': 1, 'AAAGGTTAGCCCCAGCT': 1, 'CTGAACGCGAGCTGGTC': 1, 'GAGCTCGTGACATCTAT': 1, 'CAAAAAGCGACCTCATA': 1, 'AACACATCACCGCGGGT': 1, 'CGGAGGCTCTCCCCGTT': 1, 'CACGTAGTCAAGTTGCG': 1, 'CCAACCCCGGCCTAAAA': 1, 'AGACACCCCGTCTAAAG': 1, 'CACCTTCACCCACTGCG': 1, 'TAAACCGACAAGCCCGA': 1, 'GGTTACCGCGCTCATGA': 1, 'CGCGAGCGATATGCGAA': 1, 'GCAGCGTTGCGCGGTGA': 1, 'GACACATTGGAGGTACA': 1, 'AATGAGGCCGTTGAGGT': 1, 'ACAGAAGTGCGATAAAT': 1, 'ATTGTTCTATGCTTGCC': 1, 'CAGGCCACCAGTCTGCT': 1, 'CCGACAATGCTAAGACG': 1, 'CAGCACCTGAGAATCAA': 1, 'CCACACGCGCGACTACA': 1, 'AGGTAAGCCCTACCAGT': 1, 'TCTAGTCCCCCATCAGG': 1, 'GACTGCAAGCGCCTGAA': 1, 'TTGAAGAACACCTGAGC': 1, 'CCCGCGATCCATTGCCC': 1, 'CCATCCGCAAACCACGG': 1,
                            'TACGGATCCGAATCCCA': 1, 'CCGAACTGGGGTATACA': 1, 'CATACGAGGCTCACCGG': 1, 'TTGACGCAAGATACCTC': 1, 'GCAAACTGTTACATAAG': 1, 'ACGAATAGCTCTGACAT': 1, 'CAACCTCGGCCCATTCC': 1, 'GACTCCCATCGACCTCC': 1, 'TTGGTGCTTCCCGAAAA': 1, 'TCGAGACACGCCCGCGG': 1, 'AAGCTGAGGGATTTGGG': 1, 'AGGAACGCTTACGGACG': 1, 'TGGTCCCGGTCCCGGAG': 1, 'GACTATTAGGATTACCA': 1, 'TGTGCGGTGGCTATCAC': 1, 'ACGCTGGACCACCAGGA': 1, 'CGTTCCAGGCCTTCGAT': 1, 'CGGTCGAAGTCACTGTA': 1, 'AGATTGTGTCCACGTTG': 1, 'TTACGAGCTCATGAGCA': 1, 'AAACGGGCGCGGATCCG': 1, 'TGACGGTACTCGCAACA': 1, 'ATTCCACAAGCACATAG': 1, 'CAGGGCTATGTGGGCCC': 1, 'ATGTTATGGCACGGTGC': 1, 'CCTCCAAGGAAACTAAG': 1, 'TAGTTACAAGCGGAGAA': 1, 'CGACCACGACAACTGCG': 1, 'TTTTGGCTGGCGAGATT': 1, 'TAGCTGTCATTAAATGC': 1, 'GCGGCAGTTCGTGCAAC': 1, 'ATTCGAACAGTGATCCA': 1, 'TACCCATTGCAATGGAC': 1, 'CAAGCCAGAGCCGGAAT': 1, 'GTCCCGCATCTCTACAA': 1, 'TGCGCCTGAACGTGCCT': 1, 'CACTGTACTACGTGTTA': 1, 'CGTTTCCAACACTACCA': 1, 'ACTGTTGCGACACTTCA': 1, 'AAGATGCGCCTTAGCTC': 1, 'CACGTTAAACGACATTC': 1, 'CAAGCATCGACATGCGC': 1, 'AACTGGGATCAGATAGA': 1, 'TCCCCAGAATTTGGGCC': 1, 'ACAAACCGTAGGCGCCA': 1, 'GCTCCAAGTTGACGGTT': 1, 'ACTGGAGCAACCTCATC': 1, 'GCAGACGGGCAAAGTTC': 1, 'CCCCACGCTCGAGGTTG': 1, 'TGTCCGCCGTAAAGTGC': 1, 'CTTTATACGCGAACTCG': 1, 'CACACAATCCCGATCGC': 1, 'GGCTAAAGAGCCGCCAA': 1, 'AGGAAGGCGACGAAATC': 1, 'ACACCTTGTCCCAGGCA': 1, 'GATTCGAGCGCTTTCGC': 1, 'ACTAACGAAAAATTCTC': 1, 'CGTTAGGACTTTACTCG': 1, 'TAAACAGTAACGGCCAA': 1, 'GATCACCCTAATCCAGC': 1, 'GAGCTGAACCTGCATAC': 1, 'TGTTTAGGATGTAATAT': 1, 'CATGTCGGCCTACCCGG': 1, 'TACTCCACAGGACATTG': 1, 'CGCATTTTACAGCGCGC': 1, 'GGCATGCAGGCCCTTAG': 1, 'AGAGCACACGACCGGTG': 1, 'ACACGATTTGCCTGTAG': 1, 'CGTACTAGGGAACTGGG': 1, 'CGTAGCGCTGAGTAAAA': 1, 'CGCTTATAAAAAGTACT': 1, 'ACCCTGCGTCCAGAGGC': 1, 'CGAGTACCAACCGTGAC': 1, 'CCAAGCCCTTTATACCG': 1, 'TATAGAGCACATCAGCT': 1, 'AATATGCAGTCATTCGA': 1, 'AACGCGTGCTCTTTTGG': 1, 'ACACGTTCAGAACAAAA': 1, 'TCCATGAGCTGAGCAGC': 1, 'CGTGGACTGTACTGACA': 1, 'CTAACCCATTCGGTCCG': 1, 'TACCGATCCCAAATTGC': 1, 'GCACCTTCAAAGCTTCT': 1, 'CAGACATACCCATGTGT': 1, 'AGGAAAAAGCTTATGCT': 1, 'CTATCAAAGCTGTAAGA': 1, 'TCCAGACCTTTGCGCGA': 1, 'AGTGCCCGTAAAGGAAT': 1, 'CAAGGAGAAGTCCGGAG': 1, 'AAATCGCCGAAGCCTAA': 1, 'CGCCAAGGGCCACACCT': 1, 'GGGACACAGGTAGATAG': 1, 'TGACGACGCCATAAAGA': 1, 'TACATCGCTAGTGAACT': 1, 'TCTGCATACCGGTGACA': 1, 'CGGTAATGTGGGGGACC': 1, 'TAAGATACAAGTCGATA': 1, 'TGTAATGTGGGGGAGGT': 1, 'TCTTGCCGGCTAGATAA': 1, 'TTTTTGGACCCCGCGAA': 1, 'TGGGCGCAACGCGGGCT': 1, 'GTGGAAACAGCGCGAAT': 1, 'GCCCGTATACACCGGGG': 1, 'GAACGCGGAATAATGCG': 1, 'GATTTCAGACTACCTGC': 1, 'AAATAGGTAATTGGTCA': 1, 'ATCCCACTAGAGTCGCG': 1, 'CAAACCGCGGTCTAAGA': 1, 'GCCGTTCCTATGCGAGC': 1, 'CTCGCTGCTGGTGCGTA': 1, 'AATTCAACGCGGTGCCT': 1, 'ATCCCTTTTGACCGCGC': 1, 'CCCACCCCCATATAAGG': 1, 'GCAAACTACGTATCAAA': 1, 'TCTAGCGCAGCTTCCCA': 1, 'GGGGTCACTAATGCTTC': 1, 'CAATAAATCACAGTTGA': 1, 'TTCCAAAATCTAAAACA': 1, 'CCAGGGACAAGAGTAAT': 1, 'GTTCTAATGAACCCAAC': 1, 'ATAACGACCCATTGTCT': 1, 'GGGGTGCCAAACATCGG': 1, 'TCTACTGCGTATAAGGG': 1, 'AGGTGTCGAATTAGAAC': 1, 'AGTGCTGGCTGGAAAAG': 1, 'TTGAGTCATACACTCCA': 1, 'TTCCCAATGTTGAGGCG': 1, 'TACCGTAAATGCAAATA': 1, 'GAACGCGGATGTTGCAA': 1, 'GCCCTTTGCAGGACGAT': 1, 'CCTAAAGCAAGTGGTGT': 1, 'GATGTGTGCATAGATTG': 1, 'ACCGCAGTTACTAACAC': 1, 'TAACGTTGCGTCACCAT': 1, 'ACCACATTCAGACGTAT': 1, 'AAACCACGGACAGGGAA': 1, 'TTCCTCACTTTACCGAC': 1, 'TACCCCGGGCATAAATG': 1, 'TTCTGAGATGTGCAGCC': 1, 'CCTTTCTGAGCAACCAG': 1, 'TCGTGCGACTGTATACT': 1, 'TATCAGCGCGCGACTTA': 1, 'CATCGACGAAGCCACGC': 1, 'GGCTATCTGGAAGATAG': 1, 'CCCTTATGAAAATTGAA': 1, 'CGAGGGGGTAGCGAGCA': 1, 'GTAGTTGACAGATACTC': 1, 'AAAGGCGCGGCTTTACA': 1, 'GACCAAAACCGGCCACT': 1, 'CGCCTACCGAAGTGAAA': 1, 'TGTTGCATTAAACCACC': 1, 'GAACAGACGATATCCCG': 1, 'GAACTTCGTTCGCTGCT': 1, 'GGGCATTTGGATCCCAA': 1, 'CCACCCCTAGCAATATT': 1, 'CCGACCATGAGGTCTTC': 1, 'CACGTGCGGATCTTCAG': 1, 'GAGAGACCCTCTCTAGT': 1, 'AACCATCAGAGGCAATC': 1, 'TGATTGGACCAACTACC': 1, 'CTAGTGGCAGACAACCT': 1, 'TCCCTGTGCGTACGCAA': 1, 'CGAACCATCGAAGGCCA': 1, 'GACCTGTTTCACTGCGA': 1, 'GCTAAACTACGATACTG': 1, 'GGTTAACGAAATAACTC': 1, 'CTAAGTATCCGAACATT': 1, 'GTGACGCAAGGCTTGCA': 1, 'CCCCAAGGCTGCATCCA': 1, 'AAGCATCGCCTGGCTCA': 1, 'TTACCGTCCAGCCCGGG': 1, 'AAAACACGAAATTCCGA': 1, 'TTTGCGATCCGCTGACT': 1, 'ACACAATAACCCGAATA': 1, 'GATGGGCCTGAGGCAGA': 1, 'TCCTGCAAGCGACCACT': 1, 'ATCAAATGGCTAATACG': 1, 'GGGATAGGGATGTCCAC': 1, 'CTTGCTTGCTCAACAAG': 1, 'CACGGGCCTACCTATGT': 1, 'TGCCACACGGGTCCTCG': 1, 'CAAGTATACATTGAACG': 1, 'CCTGTAAGTGCTACCCA': 1, 'TCATCAAAAGTATCTTC': 1, 'GTCCGGATCAAGATGAA': 1, 'ACCCTTACACACCAGCT': 1, 'CAGAATCACTCCCGCAT': 1, 'CGTGCCAATAAATTTAA': 1, 'CCGCGAGCAAACGGAAT': 1, 'CCGATATAAATTATCCT': 1, 'GCGTACAACTGAGCTGT': 1, 'GCCAAAAATCAGCACCA': 1, 'TGATCAGGCCCCGATAT': 1, 'CGAGAACTATGGCTTTT': 1, 'TAAGACGCGCTGAGGTC': 1, 'TAGCTTACTCCAATGCA': 1, 'CCCCACGTCTTTTCTAT': 1, 'AAATATCCGCGCCAAGA': 1, 'TCCCCCCCCGCAAATAG': 1, 'ACCGGTTCTATGACATC': 1})
    assert all([v == seq_data.barcode_counter[k]
               for k, v in expected_dict.items()])
    assert len(seq_data.barcode_counter) == 399


def test_annotate_barcodes(count_test_data, tn5_structure, tmpdir):
    # todo use the latest map produced by mbarq
    r1, mfile = count_test_data
    seq_data = BarcodeCounter(
        r1, tn5_structure, mapping_file=mfile, output_dir=tmpdir)
    seq_data._extract_barcodes()
    seq_data._merge_similar()
    seq_data._annotate_barcodes(filter_low=3)
    expected_counts = pd.DataFrame({'barcode': {0: 'AACAAGACCGAAATGCG'}, 'barcode_count': {0: 4}, 'chr': {0: 'HE654725.1'}, 'insertion_site': {0: 70268}, 'abundance_in_mapping_library': {0: 11044}, 'gene_start': {
                                   0: 70132}, 'gene_end': {0: 70383}, 'gene_strand': {0: '+'}, 'ID': {0: 'gene-SL1344_P2_0081'}, 'Name': {0: 'shfB'}, 'locus_tag': {0: 'SL1344_P2_0081'}, 'distance_to_feature': {0: 0}, 'percentile': {0: 0.54}})
    assert (expected_counts.equals(seq_data.annotated_cnts))


# todo same without filtering low counts


def test_count_barcodes(count_test_data, tn5_structure, tmpdir):

    r1, mfile = count_test_data
    seq_data = BarcodeCounter(
        r1, tn5_structure, mapping_file=mfile, output_dir=tmpdir)
    seq_data.count_barcodes(filter_low=3)
    actual_counts = pd.read_csv(tmpdir.join(
        "dnaid1315_124_subsample_mbarq_counts.csv"))

    expected_counts = pd.DataFrame({'barcode': {0: 'AACAAGACCGAAATGCG'}, 'barcode_count': {0: 4}, 'chr': {0: 'HE654725.1'}, 'insertion_site': {0: 70268}, 'abundance_in_mapping_library': {0: 11044}, 'gene_start': {
                                   0: 70132}, 'gene_end': {0: 70383}, 'gene_strand': {0: '+'}, 'ID': {0: 'gene-SL1344_P2_0081'}, 'Name': {0: 'shfB'}, 'locus_tag': {0: 'SL1344_P2_0081'}, 'distance_to_feature': {0: 0}, 'percentile': {0: 0.54}})
    assert (expected_counts.equals(seq_data.annotated_cnts))


# def test_count_barcodes_wish(wish_structure, count_test_data_wish, tmpdir):
#     fq, mfile = count_test_data_wish
#     seq_data = BarcodeCounter(fq, wish_structure, mapping_file=mfile, output_dir=tmpdir)
#     seq_data.count_barcodes()
#     expected_counts = f"{EXPDATA}/LibraryA_pilot2_mbarq_counts.csv"
#     actual_counts = tmpdir.join("LibraryA_pilot2_mbarq_counts.csv")
#     assert_files_are_same(expected_counts, actual_counts)


#
